/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/onkarbanerjee/crd-operator/pkg/apis/customconfig/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CustomConfigLister helps list CustomConfigs.
// All objects returned here must be treated as read-only.
type CustomConfigLister interface {
	// List lists all CustomConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CustomConfig, err error)
	// CustomConfigs returns an object that can list and get CustomConfigs.
	CustomConfigs(namespace string) CustomConfigNamespaceLister
	CustomConfigListerExpansion
}

// customConfigLister implements the CustomConfigLister interface.
type customConfigLister struct {
	indexer cache.Indexer
}

// NewCustomConfigLister returns a new CustomConfigLister.
func NewCustomConfigLister(indexer cache.Indexer) CustomConfigLister {
	return &customConfigLister{indexer: indexer}
}

// List lists all CustomConfigs in the indexer.
func (s *customConfigLister) List(selector labels.Selector) (ret []*v1.CustomConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CustomConfig))
	})
	return ret, err
}

// CustomConfigs returns an object that can list and get CustomConfigs.
func (s *customConfigLister) CustomConfigs(namespace string) CustomConfigNamespaceLister {
	return customConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomConfigNamespaceLister helps list and get CustomConfigs.
// All objects returned here must be treated as read-only.
type CustomConfigNamespaceLister interface {
	// List lists all CustomConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.CustomConfig, err error)
	// Get retrieves the CustomConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.CustomConfig, error)
	CustomConfigNamespaceListerExpansion
}

// customConfigNamespaceLister implements the CustomConfigNamespaceLister
// interface.
type customConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomConfigs in the indexer for a given namespace.
func (s customConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.CustomConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CustomConfig))
	})
	return ret, err
}

// Get retrieves the CustomConfig from the indexer for a given namespace and name.
func (s customConfigNamespaceLister) Get(name string) (*v1.CustomConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("customconfig"), name)
	}
	return obj.(*v1.CustomConfig), nil
}
